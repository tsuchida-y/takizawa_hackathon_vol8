// Mocks generated by Mockito 5.4.6 from annotations
// in takizawa_hackathon_vol8/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:takizawa_hackathon_vol8/providers/user_profile_provider.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserProfile_0 extends _i1.SmartFake implements _i2.UserProfile {
  _FakeUserProfile_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [UserProfileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserProfileRepository extends _i1.Mock
    implements _i2.UserProfileRepository {
  MockUserProfileRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.UserProfile> getUserProfile() =>
      (super.noSuchMethod(
            Invocation.method(#getUserProfile, []),
            returnValue: _i3.Future<_i2.UserProfile>.value(
              _FakeUserProfile_0(this, Invocation.method(#getUserProfile, [])),
            ),
          )
          as _i3.Future<_i2.UserProfile>);

  @override
  _i3.Future<bool> saveUserProfile(_i2.UserProfile? profile) =>
      (super.noSuchMethod(
            Invocation.method(#saveUserProfile, [profile]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> checkUserIdAvailability(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#checkUserIdAvailability, [userId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}
